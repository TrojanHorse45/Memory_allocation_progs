#include <stdio.h>
#include <stdlib.h>

int main() {
    int nf, nb;
    printf("Enter the number of files and memory blocks:\n");
    scanf("%d %d", &nf, &nb);

    int f_size[nf], f_alloc[nf], b_size[nb], b_status[nb], frag[nf];

    // Initialize block status (0 = free, 1 = occupied)
    for (int i = 0; i < nb; i++) {
        b_status[i] = 0;
    }

    // Input memory block sizes and statuses
    for (int i = 0; i < nb; i++) {
        printf("Enter the size and status of block %d: ", i + 1);
        scanf("%d %d", &b_size[i], &b_status[i]);
    }

    // Input file sizes
    for (int i = 0; i < nf; i++) {
        printf("Enter the size of file %d: ", i + 1);
        scanf("%d", &f_size[i]);
    }

    // File allocation using Best Fit
    for (int i = 0; i < nf; i++) {
        int bestidx = -1;  // Initialize best index as -1 (no block found)
        
        // Search for the best fit block for the current file
        for (int j = 0; j < nb; j++) {
            if (!b_status[j] && f_size[i] <= b_size[j]) { // Check if block is free and can fit the file
                if (bestidx == -1 || (b_size[j] - f_size[i] < b_size[bestidx] - f_size[i])) {
                    bestidx = j;  // Update best index if this block is a better fit
                }
            }
        }
        
        // Allocate the best fit block, if found
        if (bestidx != -1) {
            frag[i] = b_size[bestidx] - f_size[i];  // Calculate fragmentation
            f_alloc[i] = bestidx;                   // Allocate block to file
            b_status[bestidx] = 1;                  // Mark block as occupied
        } else {
            frag[i] = 0;                            // No fragmentation if not allocated
            f_alloc[i] = -1;                        // Mark file as not allocated
        }
    }

    // Display allocation details
    printf("\nFile Allocation Details (Best Fit):\n");
    printf("File No.\tFile Size\tBlock No.\tFragmentation\n");
    for (int i = 0; i < nf; i++) {
        if (f_alloc[i] != -1) {
            printf("%d\t\t%d\t\t%d\t\t%d\n", i + 1, f_size[i], f_alloc[i] + 1, frag[i]);
        } else {
            printf("%d\t\t%d\t\tNot Allocated\tN/A\n", i + 1, f_size[i]);
        }
    }
    
    return 0;
}
